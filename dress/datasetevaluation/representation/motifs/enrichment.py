from abc import abstractmethod
import os
import subprocess
from typing import Union
import pandas as pd
from dress.datasetevaluation.representation.motifs.utils import _dataset_to_fasta
from dress.datasetgeneration.dataset import Dataset
from dress.datasetgeneration.logger import setup_logger
from dress.datasetgeneration.os_utils import assign_proper_basename
from matplotlib import pyplot as plt
import seaborn as sns


class MotifEnrichment:
    def __init__(
        self, df: Union[Dataset, pd.DataFrame], specific_basename: str = None, **kwargs
    ):
        """
        Perform motif enrichment between two sequence groups. If only
        one group is given, control sequences will be created by shuffling
        sequences of the first group.

        Args:
            df Union[Dataset, pd.DataFrame]: Dataframe with sequence IDs (in rows)
        and motif counts (in columns). A `group` column must
        exist in the data defining the groups to be compared
            specific_basename (str): Specific basename to add to output.
        """

        if "logger" in kwargs:
            self.logger = kwargs["logger"]
        else:
            self.logger = setup_logger(level=0)

        if isinstance(df, Dataset):
            df = df.data

        assert "group" in df.columns, "A 'group' column must exist in the data"
        if df.group.nunique() == 1:
            self.logger.warning(
                "Only 1 group found. Control sequences will be generated by shuffling the dataset"
            )

        for c in ["Score", "Delta_score"]:
            if c in df.columns:
                df.drop(columns=c, inplace=True)

        self.seqs = df[["Seq_id", "Sequence", "group"]]
        self.outdir = os.path.join(kwargs.get("outdir", "output"), "motifs/enrichment")
        os.makedirs(self.outdir, exist_ok=True)
        self.outbasename = assign_proper_basename(kwargs.get("outbasename"))
        self.specific_basename = assign_proper_basename(specific_basename)

    @abstractmethod
    def visualize(self): ...


class StremeEnrichment(MotifEnrichment):
    def __init__(self, df: pd.DataFrame, specific_basename: str = None, **kwargs):
        super().__init__(df, specific_basename, **kwargs)

        if hasattr(self, "seqs"):
            self.results = self._run()

    def _run(self) -> pd.DataFrame:
        """
        Run STREME from MEME suite
        """
        streme_outdir = self.outdir + "/streme"
        os.makedirs(streme_outdir, exist_ok=True)

        streme_cmd = [
            "streme",
            "--objfun",
            "de",
            "--no-pgc",
            "--rna",
            "--hofract",
            "0.1",
            "-minw",
            "5",
            "-maxw",
            "12",
            "--order",
            "2",
            "--thresh",
            "0.01",
            "--evalue",
            "--patience",
            "5",
            "--oc",
            streme_outdir,
        ]

        if self.seqs.group.nunique() == 2:
            fasta_files = _dataset_to_fasta(
                self.seqs, groupby_col="group", outdir=streme_outdir
            )
        else:
            fasta_files = [_dataset_to_fasta(self.seqs, outdir=streme_outdir)]
        
        for i, f in enumerate(fasta_files):
            streme_cmd += ["--p", f] if i == 0 else ["--n", f]

        self.logger.info("Running STREME ..")
        self.logger.debug(f"Command to run STREME: {' '.join(streme_cmd)}")
        _p = subprocess.run(
            streme_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        if _p.returncode != 0:
            self.logger.error(
                f"STREME failed with error: {_p.stderr.decode()}")

    def visualize(self):
        """
        Visualize motif enrichment results

        Args:
            df (pd.DataFrame): Dataframe with motif enrichment results
        """
        ...
